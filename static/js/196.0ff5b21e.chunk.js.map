{"version":3,"file":"static/js/196.0ff5b21e.chunk.js","mappings":"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","sources":["webpack://social-networks-ts/./src/Components/Users/usersContainer.module.css?acdd","Components/Users/Users.tsx","Redux/users-selectors.tsx","Components/Users/UsersContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerStyle\":\"usersContainer_containerStyle__mkpGs\",\"UserStyle\":\"usersContainer_UserStyle__mqw6o\",\"photo\":\"usersContainer_photo__LUQ+s\",\"UnfollowButtonStyle\":\"usersContainer_UnfollowButtonStyle__-hAdz\",\"FollowButtonStyle\":\"usersContainer_FollowButtonStyle__yvzO2\",\"selectedPage\":\"usersContainer_selectedPage__NbUsn\",\"defaultPage\":\"usersContainer_defaultPage__9TunV\"};","import {AxiosUsersType} from \"../../Redux/reducer/users-reducer\";\r\nimport styles from \"./usersContainer.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Pagination} from \"antd\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nimport {AntDesignOutlined} from '@ant-design/icons';\r\n\r\ntype UsersPropsType = {\r\n    users: Array<AxiosUsersType>\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n    totalUserCount: number\r\n    pageSize: number\r\n    followingInProgress: any[]\r\n    toggleFollowTC: (userId: number, followed: boolean) => void\r\n}\r\n\r\nexport const Users = (\r\n    {\r\n        toggleFollowTC,\r\n        users,\r\n        currentPage,\r\n        followingInProgress,\r\n        totalUserCount,\r\n        pageSize,\r\n        onPageChanged\r\n    }: UsersPropsType) => {\r\n\r\n    const [page, setCurrentPage] = useState(currentPage)\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize)\r\n\r\n    const onChangePaginationHandler = (page: number, pageSize: number) => {\r\n        onPageChanged(page)\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    return <div className={styles.containerStyle}>\r\n        <div>\r\n            <Pagination current={currentPage}\r\n                        //defaultCurrent={1}\r\n                        total={pagesCount}\r\n                        onChange={(page, pageSize) => onChangePaginationHandler(page, pageSize)}\r\n            />\r\n        </div>\r\n        {\r\n            users.map(u => <UserCard id={u.id}\r\n                                     key={u.id}\r\n                                     smallPhoto={u.photos.small}\r\n                                     name={u.name}\r\n                                     status={u.status}\r\n                                     followed={u.followed}\r\n                                     followingInProgress={followingInProgress}\r\n                                     toggleFollowTC={toggleFollowTC}\r\n            />)\r\n        }\r\n    </div>\r\n}\r\n\r\ntype UserCardPropsTypes = {\r\n    id: number,\r\n    smallPhoto: any,\r\n    name: string,\r\n    status: string,\r\n    followed: boolean,\r\n    followingInProgress: any[],\r\n    toggleFollowTC: (userId: number, followed: boolean) => void,\r\n}\r\n\r\nexport const UserCard = (\r\n    {\r\n        toggleFollowTC,\r\n        followingInProgress,\r\n        id,\r\n        followed,\r\n        status,\r\n        name,\r\n        smallPhoto\r\n    }: UserCardPropsTypes) => {\r\n\r\n    return <div key={id} className={styles.UserStyle} style={{display: 'flex', maxWidth: '300px'}}>\r\n            <div>\r\n                <NavLink to={'/profile/' + id}>\r\n                    {smallPhoto\r\n                        ? <img src={smallPhoto} className={styles.photo}/>\r\n                        : <Avatar\r\n                            size={{\r\n                                xs: 24,\r\n                                sm: 32,\r\n                                md: 40,\r\n                                lg: 64,\r\n                                xl: 80,\r\n                                xxl: 100,\r\n                            }}\r\n                            icon={<AntDesignOutlined/>}\r\n                        />}\r\n                </NavLink>\r\n            </div>\r\n        <div>\r\n            <div>\r\n                <div>name: {name || 'no name'}</div>\r\n                <div>status: {status || '----'}</div>\r\n            </div>\r\n            <div>\r\n                <div> country: ?</div>\r\n                <div> citi: ?</div>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            {\r\n                followed ?\r\n                    <button disabled={followingInProgress.some(id => id === id)}\r\n                            onClick={() => toggleFollowTC(id, followed)}\r\n                            className={styles.UnfollowButtonStyle}\r\n                    >\r\n                        Unfollow\r\n                    </button> :\r\n                    <button disabled={followingInProgress.some(id => id === id)}\r\n                            onClick={() => toggleFollowTC(id, followed)}\r\n                            className={styles.FollowButtonStyle}\r\n                    >\r\n                        Follow\r\n                    </button>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import {AppRootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state: AppRootStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const testReselect = createSelector(getUsers, getPageSize, (users: any) => {\r\n    return users.filter( (u: any) => true)\r\n} ) // test reselect\r\n\r\nexport const getTotalUserCount = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUserCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    AxiosUsersType, toggleFollowTC, requestUsersTC,\r\n    setCurrentPageAC, toggleFollowingProgressAC\r\n} from \"../../Redux/reducer/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Spin} from \"antd\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount, getUsers\r\n} from \"../../Redux/users-selectors\";\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, getUsersTC} = this.props\r\n        getUsersTC(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        const {pageSize, setCurrentPage, getUsersTC} = this.props\r\n        setCurrentPage(page)\r\n        getUsersTC(page, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        /*className={this.props.currentPage === el && styles.selectedPage}*/\r\n        return (\r\n            <>\r\n                {this.props.isFetching && <Spin size=\"large\" />}\r\n                <Users\r\n                    users={this.props.users}\r\n                    onPageChanged={this.onPageChanged}\r\n                    currentPage={this.props.currentPage}\r\n                    totalUserCount={this.props.totalUserCount}\r\n                    pageSize={this.props.pageSize}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    toggleFollowTC={this.props.toggleFollowTC}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps,\r\n        {\r\n            setCurrentPage: setCurrentPageAC,\r\n            toggleFollowingProgress: toggleFollowingProgressAC,\r\n            getUsersTC: requestUsersTC,\r\n            toggleFollowTC: toggleFollowTC\r\n        })\r\n)(UsersContainer)\r\n\r\n// types\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<AxiosUsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: any[]\r\n}\r\n\r\ntype PropsType = {\r\n    users: Array<AxiosUsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: any[]\r\n\r\n    toggleFollow: (userID: number) => void\r\n    setCurrentPage: (page: number) => void\r\n    getUsersTC: (currentPage: number, pageSize: number) => void\r\n    toggleFollowTC: (userId: number, followed: boolean) => void\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../Redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to='/login'/>\r\n        } else {\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectAuthRedirectComponent\r\n}\r\n"],"names":["Users","toggleFollowTC","users","currentPage","followingInProgress","totalUserCount","pageSize","onPageChanged","useState","setCurrentPage","pagesCount","Math","ceil","className","styles","current","total","onChange","page","onChangePaginationHandler","map","u","UserCard","id","smallPhoto","photos","small","name","status","followed","style","display","maxWidth","to","src","size","xs","sm","md","lg","xl","xxl","icon","AntDesignOutlined","disabled","some","onClick","getUsers","state","usersPage","getPageSize","getTotalUserCount","createSelector","filter","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","UsersContainer","props","getUsersTC","this","React","compose","withAuthRedirect","connect","setCurrentPageAC","toggleFollowingProgress","toggleFollowingProgressAC","requestUsersTC","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}