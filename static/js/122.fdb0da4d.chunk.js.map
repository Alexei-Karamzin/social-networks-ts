{"version":3,"file":"static/js/122.fdb0da4d.chunk.js","mappings":"gOACA,EAAwB,qBAAxB,EAAwD,wB,SCY3CA,EAAQ,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,QAASC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,WAC3CC,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBASnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,EACZC,QAAS,IAEbC,SAAU,SAAAN,GACNL,EAASJ,EAAQS,IACjBH,EAAOU,eAIf,OACI,kBAAMD,SAAUT,EAAOW,aAAvB,WACI,kBAAOC,QAAQ,QAAf,oBACA,kBACIC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOG,OAAOC,SAGzB,kBAAOQ,QAAQ,WAAf,uBACA,kBACIO,UAAWvB,EAAQwB,EAAgBA,EACnCP,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOG,OAAOE,WAExBV,IAAgB,gBAAK0B,MAAO,CAACC,MAAO,OAApB,SAA6B3B,KAC9C,kBAAOiB,QAAQ,WAAf,0BACA,mBAAQG,KAAK,SAAb,qBACClB,IAAc,gBAAK0B,IAAK1B,IACxBA,IAAc,kBAAOgB,GAAG,UACHC,KAAK,UACLC,KAAK,OACLC,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOG,OAAOK,c,oBClCvD,GAAegB,EAAAA,EAAAA,KARO,SAACC,GACnB,MAAO,CACH9B,aAAc8B,EAAMC,KAAK/B,aACzBC,MAAO6B,EAAMC,KAAKC,cAClB9B,WAAY4B,EAAMC,KAAK7B,cAIS,CAACH,QAAAA,EAAAA,IAAzC,EArBuB,SAACkC,GAIpB,OAFmBC,EAAAA,EAAAA,KAA8B,SAAAJ,GAAK,OAAIA,EAAMC,KAAKI,eAG1D,SAAC,KAAD,CAAUC,GAAI,cAIrB,SAACtC,GAAD,UAAWmC","sources":["webpack://social-networks-ts/./src/Components/Login/Login.module.css?2cea","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Login_error__dV2kg\",\"standard\":\"Login_standard__SfEnG\"};","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch} from \"../../Redux/redux-store\";\r\nimport {LoginPayloadType} from \"../../Redux/reducer/auth-reducer\";\r\nimport classes from './Login.module.css'\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (payload: LoginPayloadType) => any\r\n    errorMessage: null | string\r\n    error: boolean\r\n    captchaUrl: null | string\r\n}\r\n\r\nexport const Login = ({loginTC, errorMessage, error, captchaUrl}: LoginPropsType) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true,\r\n            captcha: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"email\">email</label>\r\n            <input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n            />\r\n\r\n            <label htmlFor=\"password\">password</label>\r\n            <input\r\n                className={error ? classes.error : classes.standard}\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n            />\r\n            {errorMessage && <div style={{color: 'red'}}>{errorMessage}</div>}\r\n            <label htmlFor=\"checkbox\">remember me</label>\r\n            <button type=\"submit\">sign in</button>\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && <input id=\"captcha\"\r\n                                  name=\"captcha\"\r\n                                  type=\"text\"\r\n                                  onChange={formik.handleChange}\r\n                                  value={formik.values.captcha}\r\n            />}\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {connect, useSelector} from 'react-redux';\r\nimport {Login} from \"./Login\";\r\nimport {LoginPayloadType, loginTC} from \"../../Redux/reducer/auth-reducer\";\r\nimport {AppRootStateType} from \"../../Redux/redux-store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype LoginContainerPropsType = {\r\n    loginTC: (payload: LoginPayloadType) => void\r\n    errorMessage: null | string\r\n    error: boolean\r\n    captchaUrl: null | string\r\n}\r\n\r\nconst LoginContainer = (props: LoginContainerPropsType) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <Login {...props}/>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        error: state.auth.errorAppLogin,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginTC})(LoginContainer)"],"names":["Login","loginTC","errorMessage","error","captchaUrl","dispatch","useAppDispatch","formik","useFormik","validate","values","email","password","initialValues","rememberMe","captcha","onSubmit","resetForm","handleSubmit","htmlFor","id","name","type","onChange","handleChange","value","className","classes","style","color","src","connect","state","auth","errorAppLogin","props","useSelector","isLoggedIn","to"],"sourceRoot":""}