{"version":3,"file":"static/js/546.e9052d54.chunk.js","mappings":"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","sources":["Components/Profile/Profile.module.css","webpack://social-networks-ts/./src/Components/Profile/ProfileInfo.module.css?9b14","Components/Profile/ProfileStatusWithHooks.tsx","Components/Profile/Contact.tsx","Components/Profile/ProfileData.tsx","Components/Profile/ProfileDataForm.tsx","Components/Profile/ProfileInfo.tsx","Components/MyPosts/MyPosts.module.css","webpack://social-networks-ts/./src/Components/MyPosts/Posts/Post.module.css?8a8b","Components/MyPosts/Posts/Post.tsx","Components/MyPosts/MyPosts.tsx","Components/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileInfo_img__EWyJv\",\"mainPhoto\":\"ProfileInfo_mainPhoto__LeM37\"};","import React, {useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({status, updateStatus}: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newStatus, setNewStatus] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        setNewStatus(status)\r\n    }, [status])\r\n\r\n    const deactivateEditModeHandler = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n\r\n    const onStatusChangeHandler = (value: string) => {\r\n        setNewStatus(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Status:\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={() => setEditMode(true)}>{status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={(e) => onStatusChangeHandler(e.currentTarget.value)}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditModeHandler}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: any\r\n    contactValue: any\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n\r\n\r\n    return <div>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}","import {Contact} from \"./Contact\";\r\nimport React from \"react\";\r\nimport {Button} from \"antd\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: any\r\n    isOwner: boolean\r\n    setEditMode: (value: boolean) => void\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, setEditMode}: ProfileDataPropsType) => {\r\n\r\n    return <div>\r\n        {isOwner && <Button type=\"primary\" onClick={() => setEditMode(true)}>Edit data</Button>}\r\n        <div>\r\n            <b>about me: {profile.aboutMe}</b>\r\n        </div>\r\n        <div>\r\n            <b>full Name: {profile.fullName}</b>\r\n        </div>\r\n        <div>\r\n            <b>looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</b>\r\n        </div>\r\n        <div>\r\n            <b>looking for a job description: {profile.lookingForAJobDescription}</b>\r\n        </div>\r\n        <div>\r\n            <b>contacts</b>:\r\n            {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key}\r\n                                contactTitle={key}\r\n                                contactValue={profile.contacts[key as keyof typeof profile.contacts]}\r\n                />\r\n            })}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {\r\n    Form,\r\n    Input,\r\n    Checkbox\r\n} from 'antd';\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {useAppDispatch} from \"../../Redux/redux-store\";\r\nimport {editProfileTC, ProfileUserType} from \"../../Redux/reducer/profile-reducer\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileUserType\r\n    setEditMode: (value: boolean) => void\r\n}\r\n\r\nexport const ProfileDataForm = ({profile, setEditMode}: ProfileDataPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.aboutMe) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            aboutMe: profile.aboutMe,\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            facebook: profile.contacts.facebook,\r\n            website: profile.contacts.website,\r\n            vk: profile.contacts.vk,\r\n            twitter: profile.contacts.twitter,\r\n            instagram: profile.contacts.instagram,\r\n            youtube: profile.contacts.youtube,\r\n            github: profile.contacts.github,\r\n            mainLink: profile.contacts.mainLink,\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(editProfileTC(profile.userId, values))\r\n            setEditMode(false)\r\n            //formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n            <Form\r\n                labelCol={{span: 5}}\r\n                wrapperCol={{span: 14}}\r\n                layout=\"horizontal\"\r\n                onSubmitCapture={formik.handleSubmit}\r\n            >\r\n                <Form.Item label=\"about me: \">\r\n                    <TextArea rows={2}\r\n                              id=\"aboutMe\"\r\n                              name=\"aboutMe\"\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.aboutMe}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"full name: \">\r\n                    <Input id=\"fullName\"\r\n                           name=\"fullName\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.fullName}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"looking for a job:\" name=\"lookingForAJob\">\r\n                    <Checkbox id=\"lookingForAJob\"\r\n                              name=\"lookingForAJob\"\r\n                              onChange={formik.handleChange}\r\n                              checked={formik.values.lookingForAJob}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"description: \">\r\n                    <TextArea rows={2}\r\n                              id=\"lookingForAJobDescription\"\r\n                              name=\"lookingForAJobDescription\"\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.lookingForAJobDescription}/>\r\n                </Form.Item>\r\n                <div>contacts: </div>\r\n                <Form.Item label=\"facebook: \">\r\n                    <Input id=\"facebook\"\r\n                           name=\"facebook\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.facebook}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"github: \">\r\n                    <Input id=\"github\"\r\n                           name=\"github\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.github}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"vk: \">\r\n                    <Input id=\"vk\"\r\n                           name=\"vk\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.vk}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"instagram: \">\r\n                    <Input id=\"instagram\"\r\n                           name=\"instagram\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.instagram}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"mainLink: \">\r\n                    <Input id=\"mainLink\"\r\n                           name=\"mainLink\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.mainLink}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"twitter: \">\r\n                    <Input id=\"twitter\"\r\n                           name=\"twitter\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.twitter}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"youtube: \">\r\n                    <Input id=\"youtube\"\r\n                           name=\"youtube\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.youtube}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"website: \">\r\n                    <Input id=\"website\"\r\n                           name=\"website\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.website}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"edit\">\r\n                    <button type=\"submit\">edit</button>\r\n                </Form.Item>\r\n            </Form>\r\n        /*<form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"email\">email</label>\r\n            <input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n            />\r\n\r\n            <label htmlFor=\"password\">password</label>\r\n            <input\r\n                className={error ? classes.error : classes.standard}\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n            />\r\n            {errorMessage && <div style={{color: 'red'}}>{errorMessage}</div>}\r\n            <label htmlFor=\"checkbox\">remember me</label>\r\n            <button type=\"submit\">sign in</button>\r\n        </form>*/\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport {ProfileUserType, savePhotoTC, updateUserStatusTC} from \"../../Redux/reducer/profile-reducer\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport {Button} from \"antd\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileUserType\r\n    status: string\r\n}\r\n\r\nexport const ProfileInfo = (\r\n    {\r\n        profile,\r\n        status,\r\n        isOwner,\r\n    }: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target?.files?.length) {\r\n            savePhotoTC(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const updateStatusHandler = (status: string) => {\r\n        updateUserStatusTC(status)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.ava}>\r\n                <img src={profile.photos.large || userPhoto}\r\n                     className={classes.mainPhoto}/>\r\n                {isOwner && <input type={'file'}\r\n                                   onChange={(e) => onMainPhotoSelected(e)}/>}\r\n                <ProfileStatusWithHooks status={status}\r\n                                        updateStatus={updateStatusHandler}\r\n                />\r\n                {editMode ?\r\n                    <ProfileDataForm profile={profile}\r\n                                     setEditMode={setEditMode}\r\n                    /> :\r\n                    <ProfileData profile={profile}\r\n                                 isOwner={isOwner}\r\n                                 setEditMode={setEditMode}\r\n                    />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__yNFZ6\",\"item\":\"Post_item__H1oZ9\"};","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype MessageType = {\r\n    message:string,\r\n    LikeCounts:number\r\n}\r\n\r\nexport const Post: any = (props: MessageType) => {\r\n\r\n    return <div>\r\n       <div className={classes.item}><img src='https://img2.fonwall.ru/o/tp/abstract-digital-art-deviantart.jpeg?route=mid&h=750'/>\r\n        {props.message}\r\n           <div>\r\n               {props.LikeCounts} Like\r\n           </div>\r\n       </div>\r\n    </div>\r\n}","import React, {useState} from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport {Post} from \"./Posts/Post\";\r\nimport {PostsType} from '../../trash/store'\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch} from \"../../Redux/redux-store\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nexport type PropsType = {\r\n    usersMessage: Array<PostsType>\r\n    addPostAC: (text: string) => AnyAction // ?\r\n}\r\n\r\nexport const MyPosts = React.memo((\r\n    {\r\n        usersMessage,\r\n        addPostAC\r\n    }: PropsType) => {\r\n    const dispatch = useAppDispatch()\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: '',\r\n        },\r\n        onSubmit: values => {\r\n\r\n            console.log(values)\r\n\r\n            if (values.text.trim() !== '') {\r\n                dispatch(addPostAC(values.text))\r\n                formik.resetForm();\r\n            } else {\r\n                setError('err')\r\n            }\r\n        },\r\n    })\r\n\r\n    let postsElement = usersMessage.map(p => <Post key={p.id}\r\n                                                         message={p.message}\r\n                                                         LikeCounts={p.LikeCounts}\r\n    />)\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div className={classes.content}>\r\n                <div className={classes.MyPosts}>My posts</div>\r\n                <textarea id=\"text\"\r\n                          name=\"text\"\r\n                          onChange={formik.handleChange}\r\n                          value={formik.values.text}\r\n                />\r\n                <button type=\"submit\">Add posts</button>\r\n                {postsElement}\r\n            </div>\r\n        </form>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostAC} from \"../../Redux/reducer/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        usersMessage: state.profilePage.posts,\r\n        addPostAC: addPostAC\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps)(MyPosts)\r\n\r\n\r\n/*\r\nexport const MyPostsContainer = (props: PropsType) => {\r\n\r\n    const usersMessage = props.store.getState().ProfilePage.posts\r\n    const newPostText = props.store.getState().ProfilePage.newPostText\r\n\r\n    const onClickAddPostHandler = () => {\r\n        props.store.dispatch(AddPostAC())\r\n    }\r\n\r\n    const onChangeTextareaHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.store.dispatch(UpdateTextPostAC(e.currentTarget.value))\r\n    }\r\n\r\n    return (\r\n        <MyPosts\r\n            usersMessage={usersMessage}\r\n            newPostText={newPostText}\r\n            onClickAddPostHandler={onClickAddPostHandler}\r\n            onChangeTextareaHandler={onChangeTextareaHandler}\r\n        />\r\n    )\r\n}\r\n*/\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo\";\r\nimport {MyPostsContainer} from \"../MyPosts/MyPostsContainer\";\r\nimport {ProfileUserType} from \"../../Redux/reducer/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileUserType\r\n    status: string\r\n}\r\n\r\nexport const Profile = (\r\n    {\r\n        profile,\r\n        status,\r\n        isOwner,\r\n    }: ProfilePropsType) => {\r\n\r\n    return <div className={classes.content}>\r\n        <ProfileInfo profile={profile}\r\n                     status={status}\r\n                     isOwner={isOwner}\r\n        />\r\n        <MyPostsContainer/>\r\n    </div>\r\n}","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserProfileTC, ProfileUserType} from \"../../Redux/reducer/profile-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../Redux/redux-store\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\n\r\nconst ProfileContainer = (props: ProfileContainerType) => {\r\n\r\n\r\n    const profile = useSelector<AppRootStateType, ProfileUserType>(state => state.profilePage.profile)\r\n    const status = useSelector<AppRootStateType, string>(state => state.profilePage.status)\r\n    const authorizedUserId = useSelector<AppRootStateType, number | null>(state => state.auth.id)\r\n    const dispatch = useAppDispatch()\r\n\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n\r\n    useEffect(() => {\r\n\r\n        let userId = Number(params.id)\r\n        if (!userId) {\r\n            userId = authorizedUserId as number\r\n        }\r\n        dispatch(getUserProfileTC(userId))\r\n        //getUserStatus(userId)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Profile isOwner={!!profile.userId}\r\n                     profile={profile}\r\n                     status={status}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n/*class ProfileContainer1 extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        const {authorizedUserId, getUserProfile, getUserStatus, router} = this.props\r\n        let userId = router.params.id\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            console.log(userId, '- userId', authorizedUserId, '- authorizedUserId')\r\n            if (!userId) {\r\n                return <Navigate to={'login'}/>\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        //getUserStatus(userId)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.profile?.userId != prevProps.profile?.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    updateStatusHandler = (value: string) => {\r\n        const {updateUserStatus} = this.props\r\n        updateUserStatus(value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!!this.props.profile?.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.updateStatusHandler}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    WithRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getUserStatus: getUserStatusTC,\r\n        updateUserStatus: updateUserStatusTC,\r\n        savePhoto: savePhotoTC,\r\n    })\r\n)(ProfileContainer)*/\r\n\r\n// Types\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\ntype withRouterType = {\r\n    router: { location: any, navigate: any, params: any }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\ntype ProfileContainerType1 = mapDispatchToPropsType & mapStateToPropsType & withRouterType\r\ntype ProfileContainerType = {\r\n    //router: any\r\n}\r\n\r\nexport default ProfileContainer\r\n\r\n"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onDoubleClick","onChange","e","value","currentTarget","autoFocus","onBlur","Contact","contactTitle","contactValue","ProfileData","profile","isOwner","type","onClick","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","ProfileDataForm","dispatch","useAppDispatch","formik","useFormik","validate","values","email","initialValues","facebook","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","console","log","editProfileTC","userId","labelCol","span","wrapperCol","layout","onSubmitCapture","handleSubmit","label","TextArea","rows","id","name","handleChange","checked","ProfileInfo","className","classes","src","photos","large","userPhoto","target","files","length","savePhotoTC","onMainPhotoSelected","updateUserStatusTC","Post","props","message","LikeCounts","MyPosts","React","usersMessage","addPostAC","setError","text","trim","resetForm","postsElement","p","MyPostsContainer","connect","state","profilePage","posts","Profile","useSelector","authorizedUserId","auth","params","useLocation","useNavigate","useParams","Number","getUserProfileTC"],"sourceRoot":""}